#!/usr/bin/env node

/**
 * Module dependencies.
 */

var os = require("os");

var app = require('../app');
var debug = require('debug')('pi-motion-alarm:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function filterAddresses(iFace) {
  // console.log(`iFace= `, iFace);

  return iFace.filter(function (iFace) {
        return !iFace.internal && iFace.family === 'IPv4';
      })
      .map(function (iFace) {
        // console.log('iFace= ', iFace);
        return iFace.address;
      });
}

function getIpAddresses() {
  var addresses = [];
  var iFaces = os.networkInterfaces();

  for ( const i in iFaces ) {
    addresses.push(...filterAddresses(iFaces[i]));
  }

  // console.log('addresses= ', addresses);
  return addresses;
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  // console.log('Listening on ' + bind + ", addr= ",addr);
  // console.log(`os.hostname= ${os.hostname()}, os.networkInterfaces()= `, JSON.stringify(os.networkInterfaces()));
  console.log(`pi-motion-alarm server is now live on:\n`);
  console.log(`http://${os.hostname()}:${port}`);

  getIpAddresses().forEach(function (address) {
    console.log(`or:\nhttp://${address}:${port}`);
  });
  console.log('\n');
}
